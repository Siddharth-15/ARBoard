// js/main.js
document.addEventListener('DOMContentLoaded', () => {
    // Scroll to top button logic (keep as is)
    const scrollToTopBtn = document.getElementById('scrollToTopBtn');
    if (scrollToTopBtn) {
        window.addEventListener('scroll', () => {
            if (window.pageYOffset > 300) {
                scrollToTopBtn.style.display = 'block';
                setTimeout(() => scrollToTopBtn.style.opacity = '1', 10);
            } else {
                scrollToTopBtn.style.opacity = '0';
                setTimeout(() => scrollToTopBtn.style.display = 'none', 300);
            }
        });
        scrollToTopBtn.addEventListener('click', (e) => {
            e.preventDefault();
            window.scrollTo({ top: 0, behavior: 'smooth' });
        });
    }

    // Set current year in footer (keep as is)
    const currentYearSpan = document.getElementById('currentYear');
    if (currentYearSpan) {
        currentYearSpan.textContent = new Date().getFullYear();
    }

    // Click & Trail Particle Configuration (using tsParticles syntax primarily)
    const particlesContainerId = 'particles-js';
    if (document.getElementById(particlesContainerId) && (typeof tsParticles !== 'undefined' || typeof particlesJS !== 'undefined')) {
        const particleLibrary = typeof tsParticles !== 'undefined' ? tsParticles : null; // Prefer tsParticles

        const getParticleOptions = () => {
            const currentTheme = document.documentElement.getAttribute('data-theme') || 'light';
            const orangePrimary = getComputedStyle(document.documentElement).getPropertyValue('--orange-primary').trim();
            const orangeSecondary = getComputedStyle(document.documentElement).getPropertyValue('--orange-secondary').trim();
            const particleColor = currentTheme === 'dark' ? orangeSecondary : orangePrimary;

            return {
                fpsLimit: 60,
                particles: {
                    number: {
                        value: 0 // No ambient particles, only from interactions
                    },
                    color: {
                        value: particleColor
                    },
                    shape: {
                        type: "circle"
                    },
                    opacity: {
                        value: {min: 0.3, max: 0.8}, // Random opacity for a bit of shimmer
                        animation: {
                            enable: true,
                            speed: 0.8,
                            minimumValue: 0.1,
                            sync: false,
                            destroy: "max" // Destroy particle when it reaches max opacity (if going up) or min (if going down)
                        }
                    },
                    size: {
                        value: { min: 1, max: 3 }, // Small, slightly varied sizes
                        animation: {
                            enable: false // No size animation for these quick bursts/trails
                        }
                    },
                    move: {
                        enable: true,
                        speed: {min: 1, max: 3}, // Random speed for burst particles
                        direction: "none",
                        random: true,
                        straight: false,
                        outModes: { // How particles behave when reaching canvas edge
                            default: "destroy" // Destroy particles when they go out of bounds
                        }
                    },
                    life: { // For particles generated by emitters/trail
                        duration: {
                            sync: false,
                            value: 0.7 // Particles last for 0.7 seconds
                        },
                        count: 1 // Each particle lives once
                    }
                },
                interactivity: {
                    detectsOn: "canvas",
                    events: {
                        onClick: {
                            enable: true,
                            mode: "emitter" // Use emitter mode for click
                        },
                        onHover: {
                            enable: true,
                            mode: "trail", // Use trail mode for mouse move
                            parallax: { enable: false } // No parallax for trail
                        },
                        resize: true
                    },
                    modes: {
                        emitter: { // Configuration for the click emitter
                            particles: { // Particles emitted on click
                                color: { value: particleColor },
                                opacity: { value: {min: 0.5, max: 1}, animation: { enable: true, speed: 1, minimumValue: 0, sync: false, destroy: "min" } },
                                size: { value: {min: 1.5, max: 4} },
                                move: {
                                    speed: {min: 3, max: 6},
                                    outModes: "destroy",
                                    trail: { enable: false } // No trails for these burst particles
                                },
                                life: { duration: { value: 0.5 }, count: 1 }
                            },
                            rate: {
                                quantity: 15, // 15 particles per click
                                delay: 0 // Emit immediately
                            },
                            life: {
                                count: 1, // Emitter itself fires once per click
                                duration: 0.1 // Emitter active for a very short time
                            }
                            // Position will be set to click coordinates automatically by tsParticles
                        },
                        trail: { // Configuration for the hover trail
                            delay: 0.03, // Delay between trail particle emissions
                            pauseOnStop: true, // Stop emitting if mouse stops
                            quantity: 1, // 1 particle per trail emission
                            particles: { // Properties of trail particles
                                color: { value: particleColor },
                                opacity: { value: {min: 0.1, max: 0.4}, animation: { enable: true, speed: 1, minimumValue: 0.05, sync: false, destroy: "min" } },
                                size: { value: {min: 1, max: 2.5} },
                                move: {
                                    enable: true,
                                    speed: {min:0.5, max:1}, // Trail particles move slowly or drift
                                    outModes: "destroy",
                                    trail: { enable: false } // No further trails from trail particles
                                },
                                life: { duration: { value: 0.4 }, count: 1 }
                            }
                        }
                    }
                },
                detectRetina: true,
                background: {
                    color: "transparent" // Make canvas background transparent
                }
            };
        };

        let currentParticlesInstance = null;

        async function loadParticles() {
            if (particleLibrary) { // tsParticles
                if (currentParticlesInstance) {
                    currentParticlesInstance.destroy();
                }
                currentParticlesInstance = await particleLibrary.load(particlesContainerId, getParticleOptions());
            } else if (typeof particlesJS !== 'undefined') { // Fallback for older particles.js
                if (window.pJSDom && window.pJSDom[0] && window.pJSDom[0].pJS) {
                    window.pJSDom[0].pJS.fn.vendors.destroypJS();
                }
                // Note: Emitter and Trail modes as configured above are tsParticles specific.
                // You'd need a much simpler config for particles.js focusing on onHover.mode:"grab" or "bubble"
                // and onClick.mode:"push" or "remove" or "bubble".
                // For click bursts with particles.js, you'd typically have to manually add particles.
                // This fallback will be very basic if tsParticles is not available.
                let opts = getParticleOptions();
                delete opts.interactivity.modes.emitter; // emitter is tsParticles
                delete opts.interactivity.modes.trail; // trail is tsParticles
                opts.interactivity.events.onClick.mode = "push";
                opts.interactivity.events.onHover.mode = "repulse"; // Or "grab"
                opts.particles.number.value = 20; // Add some ambient particles for older library
                particlesJS(particlesContainerId, opts);
            }
        }

        loadParticles(); // Initial load

        // Update particles on theme change
        new MutationObserver((mutationsList) => {
            for (const mutation of mutationsList) {
                if (mutation.type === 'attributes' && mutation.attributeName === 'data-theme') {
                    setTimeout(loadParticles, 50);
                }
            }
        }).observe(document.documentElement, { attributes: true });

    } else {
        if (!document.getElementById(particlesContainerId)) {
            console.warn(`Particle container #${particlesContainerId} not found. Skipping particle background.`);
        } else {
            console.warn("No particle library (tsParticles or particlesJS) found. Skipping particle background.");
        }
    }

    // Join Session Form (Placeholder)
    const joinSessionForm = document.getElementById('joinSessionForm');
    if (joinSessionForm) {
        joinSessionForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const sessionCode = document.getElementById('sessionCodeInput').value;
            const joinerName = document.getElementById('joinerNameInput').value;
            if (sessionCode && joinerName) {
                console.log(`Attempting to join session: ${sessionCode} as ${joinerName}`);
                window.location.href = `session.html?session_id=${encodeURIComponent(sessionCode)}&name=${encodeURIComponent(joinerName)}`;
            } else {
                alert('Please enter a session code and your name.');
            }
        });
    }

    // Intersection Observer for animations
    const animatedElements = document.querySelectorAll('[style*="animation:"]');
    if (animatedElements.length > 0) {
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.style.animationPlayState = 'running';
                    observer.unobserve(entry.target);
                }
            });
        }, { threshold: 0.15 });

        animatedElements.forEach(el => {
            if (el.style.animationName && el.style.animationPlayState !== 'paused') {
                 el.style.animationPlayState = 'paused';
            }
            observer.observe(el);
        });
    }
});